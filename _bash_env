#! /bin/bash
#
# Path additions
#

if [ -d "$HOME/.bin" ]; then
    export PATH=$PATH:$HOME/.bin
fi

#
# Environment variables
#

export EDITOR=vim
export SUDO_EDITOR=vim
export RANGER_LOAD_DEFAULT_RC=FALSE

#
# Aliases
#

alias ls='ls --color=auto'
alias ll='ls -Alh'

alias cls='clear; ls'

alias tmux='tmux -2'

alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'

alias bsrc='source ~/.bash_profile'
alias Xres='xrdb -merge ~/.Xresources'

alias pg='ps -ef | grep -v grep | grep'
alias ff='find . -type f -iname'

alias vimprof='vim --startuptime /dev/stdout +qall'
alias vimmaps="vim -c 'redir > ~/vim-maps.txt' -c 'map' -c 'qa!'"

alias bigfiles="find . -type f -print0 | xargs -0 du | sort -n | tail -30 | cut -f2 | xargs -I{} du -sh {} && echo total: $(du -sh . | awk '{print $1}')"

# apt/dpkg
alias apt-grep='dpkg --get-selections | grep'

# pacman
alias pac-junk='pacman -Qdtq'
alias pac-aur='pacman -Qmq'
alias pac-manual='comm -23 <(pacman -Qeq|sort) <(pacman -Qgq base base-devel|sort)'
alias pac-standalone='comm -23 <(pacman -Qetq|sort) <(pacman -Qgq base base-devel|sort)'
alias pac-log='vim /var/log/pacman.log'
alias pac-dated="expac -l ',' -H M -t '%s %c' '(%N) [%G] %l\t%m\t%n\t' | grep '()' | grep -v '\[base\|base-devel\]' | cut -d' ' -f3- | sort -n | cut -d' ' -f2-"
alias pac-recent="expac -l ',' -H M -t '%s %c' '(%N) [%G] %l\t%m\t%n\t' | grep '()' | grep -v '\[base\|base-devel\]' | cut -d' ' -f3- | awk -v old=\$(date --date='2 weeks ago 00:00' +%s) '\$1>old' | sort -n | cut -d' ' -f2-"
alias pac-big="pacgraph -c | grep --color=never -P 'GB|[0-9]{2,}MB|[0-9]{5,}kB'"

# IP addresses
alias myip='echo "$(curl -s ipecho.net/plain)"'

# URL-encode strings
alias urlencode='python2 -c "import sys, urllib as ul; print ul.quote_plus(sys.argv[1]);"'

# View HTTP traffic
#alias sniff="sudo ngrep -d 'eth0' -t '^(GET|POST) ' 'tcp and port 80'"
#alias httpdump="sudo tcpdump -i eth0 -n -s 0 -w - | grep -a -o -E \"Host\: .*|GET \/.*\""

# Get week number
alias week='date +%V'

# ROT13-encode text. Works for decoding, too! ;)
alias rot13='tr a-zA-Z n-za-mN-ZA-M'

#
# Functions
#
cl() {
    clear; cd "$@" && ls
}

# move back directories
bk() {
    back="cd .."
    if [ -n "$1" ] && [ "$1" -gt 1 ]; then
        for i in $(seq 2 $1); do
            back="${back}/.."
        done
    fi
    eval "$back"
}

conf() {
    case "$1" in
        vim)                  $EDITOR ~/.vimrc ;;
        plug*)                $EDITOR ~/.vimrc.plugins ;;
        bash)                 $EDITOR ~/.bashrc ;;
        conf|alias|func|env*) $EDITOR ~/.bash_env ;;
        X*)                   $EDITOR ~/.Xresources ;;
        tmux)                 $EDITOR ~/.tmux.conf ;;
        zsh*)                 $EDITOR ~/.zshrc ;;
        prez*)                $EDITOR ~/.zpreztorc ;;
        prompt)               $EDITOR ~/.zprezto/modules/prompt/functions/prompt_subliminal_setup ;;
        gtk2)                 $EDITOR ~/.gtkrc-2.0 ;;
        gtk3)                 $EDITOR ~/.config/gtk-3.0/settings.ini ;;
        sxh*)                 $EDITOR ~/.config/sxhkd/sxhkdrc ;;
        *)
            awk '/conf\(\)/{p=1;print;next} p&&/ \*\)/{p=0};p' ~/.bash_env | \
                tail -n +3 | sed -e 's/^ *//g'
            [ -n "$1" ] && echo "Unrecognized config command: '$1'" >&2
            ;;
    esac
}

# Determine size of a file or total size of a directory
fs() {
    if du -b /dev/null > /dev/null 2>&1; then
        local arg=-sbh
    else
        local arg=-sh
    fi
    if [[ -n "$@" ]]; then
        du $arg -- "$@"
    else
        du $arg .[^.]* *
    fi
}

shparproc() {
    cat /proc/$PPID/status | head -1 | cut -f2
}

# change extensions for all files in the current directory
chext() {
    if [[ "$*" == *-h* ]]; then
        echo "chext '.old_ext' '.new_ext'"
        echo 'Changes file extensions in the current directory'
        echo 'NOTE: include the period in both extensions, as above'
        return 0
    fi
    if [ -n "$1" ] && [ -n "$2" ]; then
        for f in *$1; do
            name=`echo $f | cut -d . -f 1`
            new=$name$2
            mv -iv $f $new
        done
    else
        echo "chext '.old_ext' '.new_ext'"
        echo 'Changes file extensions in the current directory'
        echo 'NOTE: include the period in both extensions, as above'
        return 1
    fi
}

cmd-exists() {
    type $1 &> /dev/null
}

gui2pid() {
    xprop _NET_WM_PID | sed 's/_NET_WM_PID(CARDINAL) = //' | ps `cat`
}

what_to_include_for() {
    curl -sL "http://en.cppreference.com/mwiki/index.php?search=$1" \
        | grep -i 'defined in header' \
        | grep -o '&lt;.*&gt;' \
        | sed 's/&lt;/</' \
        | sed 's/&gt;/>/'
}

